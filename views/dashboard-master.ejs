<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Master Data Management - WIKA Maint</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #2c3e50;
            --success: #27ae60;
        }
        
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .navbar-brand {
            font-weight: 700;
            color: var(--primary) !important;
        }
        
        .card {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border: none;
        }
        
        .card-header {
            background-color: var(--primary);
            color: white;
            border-radius: 10px 10px 0 0 !important;
            font-weight: 600;
        }
        
        .btn-primary {
            background-color: var(--secondary);
            border: none;
        }
        
        .btn-danger {
            background-color: var(--accent);
            border: none;
        }
        
        .btn-success {
            background-color: var(--success);
            border: none;
        }
        
        .category-badge {
            font-size: 0.9rem;
            padding: 5px 10px;
            border-radius: 20px;
        }
        
        .building-item, .floor-item, .area-item {
            background-color: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .action-buttons {
            display: flex;
            gap: 10px;
        }
        
        .section-title {
            border-left: 4px solid var(--secondary);
            padding-left: 10px;
            margin: 20px 0 15px 0;
            color: var(--dark);
        }
        
        .stats-card {
            text-align: center;
            padding: 15px;
        }
        
        .stats-number {
            font-size: 2rem;
            font-weight: 700;
            color: var(--secondary);
        }
        
        .stats-label {
            font-size: 0.9rem;
            color: var(--dark);
        }
        
        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }
        
        .alert-area {
            position: fixed;
            top: 100px;
            right: 20px;
            z-index: 1050;
            min-width: 300px;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar', { user: user }) %>
    
    <div class="alert-area" id="alertContainer"></div>
    
    <div class="container-fluid py-4">
        <div class="row">
            <div class="col-md-12">
                <h2 class="mb-4"><i class="fas fa-database me-2"></i>Master Data Management - <%= user.location %></h2>
                
                <!-- Statistics Cards -->
                <div class="row mb-4" id="statsContainer">
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="stats-number" id="categoriesCount">0</div>
                            <div class="stats-label">Categories</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="stats-number" id="buildingsCount">0</div>
                            <div class="stats-label">Buildings</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="stats-number" id="floorsCount">0</div>
                            <div class="stats-label">Floors</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="stats-number" id="areasCount">0</div>
                            <div class="stats-label">Areas</div>
                        </div>
                    </div>
                </div>
                
                <!-- Loading Spinner -->
                <div class="loading-spinner" id="loadingSpinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading master data...</span>
                    </div>
                </div>
                
                <!-- Category Cards -->
                <div class="row" id="categoriesContainer" style="display: none;">
                    <!-- Categories will be dynamically populated here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Add Building Modal -->
    <div class="modal fade" id="addBuildingModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Building</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addBuildingForm">
                        <input type="hidden" id="buildingCategory" value="">
                        <div class="mb-3">
                            <label for="buildingName" class="form-label">Building Name</label>
                            <input type="text" class="form-control" id="buildingName" placeholder="Enter building name" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveBuildingBtn">Add Building</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Floor Modal -->
    <div class="modal fade" id="addFloorModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Floor</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addFloorForm">
                        <input type="hidden" id="floorCategory" value="">
                        <input type="hidden" id="floorBuilding" value="">
                        <div class="mb-3">
                            <label for="floorName" class="form-label">Floor Name</label>
                            <input type="text" class="form-control" id="floorName" placeholder="Enter floor name" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveFloorBtn">Add Floor</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Area Modal -->
    <div class="modal fade" id="addAreaModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Area</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addAreaForm">
                        <input type="hidden" id="areaCategory" value="">
                        <input type="hidden" id="areaBuilding" value="">
                        <input type="hidden" id="areaFloor" value="">
                        <div class="mb-3">
                            <label for="areaName" class="form-label">Area Name</label>
                            <input type="text" class="form-control" id="areaName" placeholder="Enter area name" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveAreaBtn">Add Area</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Item Modal -->
    <div class="modal fade" id="editItemModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editItemForm">
                        <input type="hidden" id="editItemType" value="">
                        <input type="hidden" id="editItemCategory" value="">
                        <input type="hidden" id="editItemBuilding" value="">
                        <input type="hidden" id="editItemFloor" value="">
                        <input type="hidden" id="editItemOldName" value="">
                        <div class="mb-3">
                            <label for="editItemName" class="form-label">Name</label>
                            <input type="text" class="form-control" id="editItemName" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveEditItemBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let masterData = {};
        let currentLocation = "<%= user.location %>";
        
        // DOM elements
        const loadingSpinner = document.getElementById('loadingSpinner');
        const categoriesContainer = document.getElementById('categoriesContainer');
        const statsContainer = document.getElementById('statsContainer');
        
        // Modal elements
        const addBuildingModal = new bootstrap.Modal(document.getElementById('addBuildingModal'));
        const addFloorModal = new bootstrap.Modal(document.getElementById('addFloorModal'));
        const addAreaModal = new bootstrap.Modal(document.getElementById('addAreaModal'));
        const editItemModal = new bootstrap.Modal(document.getElementById('editItemModal'));
        
        // Initialize the dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadMasterData();
            
            // Set up event listeners for modal buttons
            document.getElementById('saveBuildingBtn').addEventListener('click', saveBuilding);
            document.getElementById('saveFloorBtn').addEventListener('click', saveFloor);
            document.getElementById('saveAreaBtn').addEventListener('click', saveArea);
            document.getElementById('saveEditItemBtn').addEventListener('click', saveEditedItem);
        });
        
        // Load master data from server
        async function loadMasterData() {
            try {
                const response = await fetch('/dashboard/master/data');
                if (!response.ok) throw new Error('Failed to load master data');
                
                const data = await response.json();
                masterData = data.masterData || {};
                
                renderMasterData();
                updateStatistics();
                
                // Hide loading spinner and show content
                loadingSpinner.style.display = 'none';
                categoriesContainer.style.display = 'flex';
                statsContainer.style.display = 'flex';
            } catch (error) {
                console.error('Error loading master data:', error);
                showAlert('Failed to load master data. Please try again.', 'danger');
            }
        }
        
        // Render master data to the UI
        function renderMasterData() {
            categoriesContainer.innerHTML = '';
            
            // Create cards for each category
            for (const [categoryName, categoryData] of Object.entries(masterData)) {
                const categoryCard = createCategoryCard(categoryName, categoryData);
                categoriesContainer.appendChild(categoryCard);
            }
        }
        
        // Create a category card
        function createCategoryCard(categoryName, categoryData) {
            const col = document.createElement('div');
            col.className = 'col-md-4';
            
            // Count buildings for this category
            const buildingCount = Object.keys(categoryData).length;
            
            col.innerHTML = `
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><i class="fas ${getCategoryIcon(categoryName)} me-2"></i>${categoryName}</span>
                        <span class="badge bg-light text-dark">${buildingCount} ${buildingCount === 1 ? 'Building' : 'Buildings'}</span>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-3">
                            <h5 class="section-title">Buildings</h5>
                            <button class="btn btn-sm btn-primary" onclick="openAddBuildingModal('${categoryName}')">
                                <i class="fas fa-plus me-1"></i>Add Building
                            </button>
                        </div>
                        
                        <div class="building-list" id="${categoryName}-building-list">
                            ${renderBuildings(categoryName, categoryData)}
                        </div>
                    </div>
                </div>
            `;
            
            return col;
        }
        
        // Render buildings for a category
        function renderBuildings(categoryName, categoryData) {
            let html = '';
            
            for (const [buildingName, buildingData] of Object.entries(categoryData)) {
                // Count floors for this building
                const floorCount = Object.keys(buildingData).length;
                
                html += `
                    <div class="building-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">${buildingName}</h6>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-outline-primary" onclick="openEditItemModal('building', '${categoryName}', '${buildingName}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteItem('building', '${categoryName}', '${buildingName}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <div class="d-flex justify-content-between mb-2">
                                <h6 class="section-title mb-0">Floors</h6>
                                <button class="btn btn-sm btn-primary" onclick="openAddFloorModal('${categoryName}', '${buildingName}')">
                                    <i class="fas fa-plus me-1"></i>Add Floor
                                </button>
                            </div>
                            
                            ${renderFloors(categoryName, buildingName, buildingData)}
                        </div>
                    </div>
                `;
            }
            
            return html;
        }
        
        // Render floors for a building
        function renderFloors(categoryName, buildingName, buildingData) {
            let html = '';
            
            for (const [floorName, areas] of Object.entries(buildingData)) {
                // Count areas for this floor
                const areaCount = Array.isArray(areas) ? areas.length : 0;
                
                html += `
                    <div class="floor-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <span>${floorName}</span>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-outline-primary" onclick="openEditItemModal('floor', '${categoryName}', '${buildingName}', '${floorName}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteItem('floor', '${categoryName}', '${buildingName}', '${floorName}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="mt-2">
                            <span class="badge bg-light text-dark category-badge">${areaCount} ${areaCount === 1 ? 'Area' : 'Areas'}</span>
                        </div>
                        
                        <div class="mt-3">
                            <div class="d-flex justify-content-between mb-2">
                                <h6 class="section-title mb-0">Areas</h6>
                                <button class="btn btn-sm btn-primary" onclick="openAddAreaModal('${categoryName}', '${buildingName}', '${floorName}')">
                                    <i class="fas fa-plus me-1"></i>Add Area
                                </button>
                            </div>
                            
                            ${renderAreas(categoryName, buildingName, floorName, areas)}
                        </div>
                    </div>
                `;
            }
            
            return html;
        }
        
        // Render areas for a floor
        function renderAreas(categoryName, buildingName, floorName, areas) {
            if (!Array.isArray(areas) || areas.length === 0) {
                return '<p class="text-muted">No areas defined for this floor.</p>';
            }
            
            let html = '';
            
            for (const area of areas) {
                html += `
                    <div class="area-item d-flex justify-content-between align-items-center">
                        <span>${area}</span>
                        <div class="action-buttons">
                            <button class="btn btn-sm btn-outline-primary" onclick="openEditItemModal('area', '${categoryName}', '${buildingName}', '${floorName}', '${area}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteItem('area', '${categoryName}', '${buildingName}', '${floorName}', '${area}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            }
            
            return html;
        }
        
        // Update statistics
        function updateStatistics() {
            let categoriesCount = 0;
            let buildingsCount = 0;
            let floorsCount = 0;
            let areasCount = 0;
            
            for (const [categoryName, categoryData] of Object.entries(masterData)) {
                categoriesCount++;
                
                for (const [buildingName, buildingData] of Object.entries(categoryData)) {
                    buildingsCount++;
                    
                    for (const [floorName, areas] of Object.entries(buildingData)) {
                        floorsCount++;
                        
                        if (Array.isArray(areas)) {
                            areasCount += areas.length;
                        }
                    }
                }
            }
            
            document.getElementById('categoriesCount').textContent = categoriesCount;
            document.getElementById('buildingsCount').textContent = buildingsCount;
            document.getElementById('floorsCount').textContent = floorsCount;
            document.getElementById('areasCount').textContent = areasCount;
        }
        
        // Get appropriate icon for category
        function getCategoryIcon(categoryName) {
            switch(categoryName) {
                case 'Facility': return 'fa-building';
                case 'Breakdown': return 'fa-tools';
                case 'Safety': return 'fa-hard-hat';
                default: return 'fa-list';
            }
        }
        
        // Show alert message
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            alertContainer.appendChild(alert);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alertContainer.contains(alert)) {
                    alertContainer.removeChild(alert);
                }
            }, 5000);
        }
        
        // Open modals
        function openAddBuildingModal(category) {
            document.getElementById('buildingCategory').value = category;
            document.getElementById('buildingName').value = '';
            addBuildingModal.show();
        }
        
        function openAddFloorModal(category, building) {
            document.getElementById('floorCategory').value = category;
            document.getElementById('floorBuilding').value = building;
            document.getElementById('floorName').value = '';
            addFloorModal.show();
        }
        
        function openAddAreaModal(category, building, floor) {
            document.getElementById('areaCategory').value = category;
            document.getElementById('areaBuilding').value = building;
            document.getElementById('areaFloor').value = floor;
            document.getElementById('areaName').value = '';
            addAreaModal.show();
        }
        
        function openEditItemModal(type, category, building, floor, oldName) {
            document.getElementById('editItemType').value = type;
            document.getElementById('editItemCategory').value = category;
            document.getElementById('editItemBuilding').value = building || '';
            document.getElementById('editItemFloor').value = floor || '';
            document.getElementById('editItemOldName').value = oldName || '';
            document.getElementById('editItemName').value = oldName || '';
            editItemModal.show();
        }
        
        // Save functions
        async function saveBuilding() {
            const category = document.getElementById('buildingCategory').value;
            const name = document.getElementById('buildingName').value.trim();
            
            if (!name) {
                showAlert('Please enter a building name', 'warning');
                return;
            }
            
            try {
                // Initialize if needed
                if (!masterData[category]) masterData[category] = {};
                if (masterData[category][name]) {
                    showAlert('A building with this name already exists', 'warning');
                    return;
                }
                
                // Add new building
                masterData[category][name] = {};
                
                // Save to server
                await saveMasterData();
                
                addBuildingModal.hide();
                showAlert('Building added successfully', 'success');
                renderMasterData();
                updateStatistics();
            } catch (error) {
                console.error('Error saving building:', error);
                showAlert('Failed to add building', 'danger');
            }
        }
        
        async function saveFloor() {
            const category = document.getElementById('floorCategory').value;
            const building = document.getElementById('floorBuilding').value;
            const name = document.getElementById('floorName').value.trim();
            
            if (!name) {
                showAlert('Please enter a floor name', 'warning');
                return;
            }
            
            try {
                // Initialize if needed
                if (!masterData[category][building]) masterData[category][building] = {};
                if (masterData[category][building][name]) {
                    showAlert('A floor with this name already exists', 'warning');
                    return;
                }
                
                // Add new floor
                masterData[category][building][name] = [];
                
                // Save to server
                await saveMasterData();
                
                addFloorModal.hide();
                showAlert('Floor added successfully', 'success');
                renderMasterData();
                updateStatistics();
            } catch (error) {
                console.error('Error saving floor:', error);
                showAlert('Failed to add floor', 'danger');
            }
        }
        
        async function saveArea() {
            const category = document.getElementById('areaCategory').value;
            const building = document.getElementById('areaBuilding').value;
            const floor = document.getElementById('areaFloor').value;
            const name = document.getElementById('areaName').value.trim();
            
            if (!name) {
                showAlert('Please enter an area name', 'warning');
                return;
            }
            
            try {
                // Initialize if needed
                if (!masterData[category][building][floor]) masterData[category][building][floor] = [];
                if (masterData[category][building][floor].includes(name)) {
                    showAlert('An area with this name already exists', 'warning');
                    return;
                }
                
                // Add new area
                masterData[category][building][floor].push(name);
                
                // Save to server
                await saveMasterData();
                
                addAreaModal.hide();
                showAlert('Area added successfully', 'success');
                renderMasterData();
                updateStatistics();
            } catch (error) {
                console.error('Error saving area:', error);
                showAlert('Failed to add area', 'danger');
            }
        }
        
        async function saveEditedItem() {
            const type = document.getElementById('editItemType').value;
            const category = document.getElementById('editItemCategory').value;
            const building = document.getElementById('editItemBuilding').value;
            const floor = document.getElementById('editItemFloor').value;
            const oldName = document.getElementById('editItemOldName').value;
            const newName = document.getElementById('editItemName').value.trim();
            
            if (!newName) {
                showAlert('Please enter a name', 'warning');
                return;
            }
            
            try {
                if (type === 'building') {
                    // Rename building
                    if (masterData[category][newName]) {
                        showAlert('A building with this name already exists', 'warning');
                        return;
                    }
                    
                    const buildingData = masterData[category][oldName];
                    delete masterData[category][oldName];
                    masterData[category][newName] = buildingData;
                } 
                else if (type === 'floor') {
                    // Rename floor
                    if (masterData[category][building][newName]) {
                        showAlert('A floor with this name already exists', 'warning');
                        return;
                    }
                    
                    const floorData = masterData[category][building][oldName];
                    delete masterData[category][building][oldName];
                    masterData[category][building][newName] = floorData;
                } 
                else if (type === 'area') {
                    // Rename area
                    if (masterData[category][building][floor].includes(newName)) {
                        showAlert('An area with this name already exists', 'warning');
                        return;
                    }
                    
                    const index = masterData[category][building][floor].indexOf(oldName);
                    if (index !== -1) {
                        masterData[category][building][floor][index] = newName;
                    }
                }
                
                // Save to server
                await saveMasterData();
                
                editItemModal.hide();
                showAlert('Item updated successfully', 'success');
                renderMasterData();
                updateStatistics();
            } catch (error) {
                console.error('Error updating item:', error);
                showAlert('Failed to update item', 'danger');
            }
        }
        
        async function deleteItem(type, category, building, floor, area) {
            if (!confirm(`Are you sure you want to delete this ${type}? This action cannot be undone.`)) {
                return;
            }
            
            try {
                if (type === 'building') {
                    // Delete building
                    delete masterData[category][building];
                } 
                else if (type === 'floor') {
                    // Delete floor
                    delete masterData[category][building][floor];
                } 
                else if (type === 'area') {
                    // Delete area
                    const index = masterData[category][building][floor].indexOf(area);
                    if (index !== -1) {
                        masterData[category][building][floor].splice(index, 1);
                    }
                }
                
                // Save to server
                await saveMasterData();
                
                showAlert(`${type.charAt(0).toUpperCase() + type.slice(1)} deleted successfully`, 'success');
                renderMasterData();
                updateStatistics();
            } catch (error) {
                console.error('Error deleting item:', error);
                showAlert('Failed to delete item', 'danger');
            }
        }
        
        // Save master data to server
        async function saveMasterData() {
            try {
                const response = await fetch('/dashboard/master/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        location: currentLocation,
                        masterData: masterData
                    })
                });
                
                if (!response.ok) throw new Error('Failed to save master data');
                
                const result = await response.json();
                if (!result.success) throw new Error(result.message || 'Failed to save master data');
                
                return true;
            } catch (error) {
                console.error('Error saving master data:', error);
                throw error;
            }
        }
    </script>
</body>
</html>