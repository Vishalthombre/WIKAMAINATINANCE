<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>User Dashboard - Raise Ticket</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/user-dashboard.css">
  <meta name="theme-color" content="#007bff"/>
  <style>
    .category-btn {
      width: 150px;
      height: 150px;
      font-size: 1.1rem;
      font-weight: 600;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .category-btn.active {
      box-shadow: 0 0 0 0.25rem rgba(13,110,253,0.25);
    }
    .category-btn[disabled] {
      opacity: .65;
      cursor: not-allowed;
      pointer-events: none;
    }
    .ticket-popup {
      position: fixed;
      right: 0;
      top: 80px;
      width: 380px;
      max-width: 95%;
      transform: translateX(110%);
      transition: transform .25s ease;
      z-index: 1050;
      background: #fff;
      height: calc(100vh - 100px);
      overflow-y: auto;
      padding-bottom: 20px;
    }
    .ticket-popup.show {
      transform: translateX(0);
    }
  </style>
</head>
<body class="bg-dashboard">
<%- include('partials/navbar', { user: user }) %>

<div class="container-fluid py-4">
  <div class="row justify-content-center g-4">
    <div class="col-12">

      <%
        const serverError = (typeof error !== 'undefined') ? error : null;
        const serverMessage = (typeof message !== 'undefined') ? message : null;
      %>

      <% if (serverError) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <strong>Error:</strong> <%= serverError %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% } %>

      <% if (serverMessage) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= serverMessage %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% } %>
    </div>

    <div class="col-lg-7 col-md-10">

      <!-- CATEGORY SELECTION -->
<div id="categorySection" class="shadow p-4 bg-white rounded-4 animate__animated animate__fadeIn">
  <div class="d-flex align-items-center justify-content-between">
      <h3 class="mb-0 text-primary">Select a Category</h3>
      <h6 class="mb-0 text-muted">Safety (Ref.-OSHA / ISO 45001)</h6>
  </div>
  <hr>
  <div class="d-flex flex-wrap gap-4 justify-content-center">

    <button id="btnFacility" type="button" class="category-btn btn">
      <img src="/images/facility.png" alt="Facility" class="category-icon">
      <span>Facility</span>
    </button>

    <button id="btnBreakdown" type="button" class="category-btn btn" disabled>
      <img src="/images/breakdown.png" alt="Breakdown" class="category-icon">
      <span>Breakdown</span>
    </button>

    <button id="btnSafety" type="button" class="category-btn btn">
      <img src="/images/safety.png" alt="Safety" class="category-icon">
      <span>Safety</span>
    </button>

    <button id="btn5S" type="button" class="category-btn btn" disabled>
      <img src="/images/5s.png" alt="5S" class="category-icon">
      <span>5S audit</span>
    </button>

    <button id="btnKaizen" type="button" class="category-btn btn" disabled>
      <img src="/images/kaizen.png" alt="Kaizen" class="category-icon">
      <span>Kaizen</span>
    </button>

    <button id="btnQuality" type="button" class="category-btn btn" disabled>
      <img src="/images/quality.png" alt="Quality" class="category-icon">
      <span>Quality audit</span>
    </button>

  </div>
</div>

      <!-- FORM SECTION -->
      <div id="formSection" class="form-section shadow p-4 bg-white rounded-4 animate__animated animate__fadeIn" style="display:none;">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <h3 class="text-primary mb-0">Raise Maintenance Ticket</h3>
          <button type="button" class="btn btn-sm btn-outline-secondary" onclick="goBackToCategories()">⬅ Back</button>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h5 id="currentCategoryLabel" class="mb-0 text-success"></h5>
          <!-- <small class="text-muted">Safety (Ref.-OSHA / ISO 45001)</small> -->
        </div>

        <form action="/ticket/submit" method="POST" id="ticketForm" novalidate>
          <input type="hidden" name="category" id="selectedCategory" />
          <input type="hidden" name="location" value="<%= user.location %>" />

          <div id="formAlertContainer"></div>
          <div id="dynamicFields"></div>

          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" name="description" id="description" rows="3" required></textarea>
          </div>

          <div class="text-end">
            <button type="submit" class="btn btn-primary px-4">Submit</button>
          </div>
        </form>
      </div>
    </div>

    <div class="col-lg-5 col-md-10 position-relative">
      <div class="ticket-history shadow p-4 bg-white rounded-4 animate__animated animate__fadeIn">
        <h4 class="mb-3 text-center text-success">📋 My Tickets</h4>

        <% if (!tickets || tickets.length === 0) { %>
          <p class="text-muted text-center">No tickets submitted yet.</p>
        <% } else { %>
          <div class="table-responsive">
            <table class="table table-bordered table-sm text-center align-middle">
              <thead class="table-light">
                <tr>
                  <th>ID</th>
                  <th>Category</th>
                  <th>Status</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                <% tickets.forEach(ticket => { %>
                  <tr>
                    <td><%= ticket.id %></td>
                    <td>
                      <div><%= ticket.category || ticket.category_id || '-' %></div>
                      <% if (ticket.building_no || ticket.area_code) { %>
                        <small class="text-muted">
                          <%= ticket.building_no ? ticket.building_no + ' / ' : '' %>
                          <%= ticket.area_code ? ticket.area_code + (ticket.sub_area ? ' / ' + ticket.sub_area : '') : '' %>
                        </small>
                      <% } %>
                    </td>
                    <td><%= ticket.status || '-' %></td>
                    <td>
                      <button class="btn btn-sm btn-outline-info show-ticket-details" data-ticket-id="<%= ticket.id %>">
                        Show Details
                      </button>
                    </td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        <% } %>
      </div>

      <div id="ticketDetailPanel" class="ticket-popup shadow p-4 rounded-start-4" aria-live="polite" aria-atomic="true">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h5 class="mb-0 text-primary">Ticket Details</h5>
          <button class="btn-close" onclick="closePopup()" aria-label="Close details panel"></button>
        </div>
        <div id="ticketDetailsContent"></div>
      </div>
    </div>
  </div>
</div>

<script>
  let masterData = {};
  let keywords = {};
  const userLocation = "<%= user.location %>";

  const currentUser = <%- JSON.stringify(user).replace(/</g, "\\u003c") %>;
  window._tickets = <%- JSON.stringify(tickets || []).replace(/</g, "\\u003c") %>;

  // ----------------------------
  // Robust loader for masterData.json
  // ----------------------------
  async function loadMasterData() {
    try {
      // Try multiple likely public paths (graceful fallback)
      const token = localStorage.getItem('token');
      const headers = token ? { 'Authorization': 'Bearer ' + token } : {};
      const candidatePaths = [
        '/data/masterData.json',
        '/masterData.json',
        '/public/data/masterData.json',
        '/public/masterData.json'
      ];

      let all = null;
      for (const p of candidatePaths) {
        try {
          const res = await fetch(p, { credentials: 'same-origin', headers });
          if (!res.ok) {
            // skip non-200
            continue;
          }
          const json = await res.json();
          if (json && typeof json === 'object') {
            all = json;
            break;
          }
        } catch (err) {
          // ignore and try next path
          continue;
        }
      }

      if (!all) {
        console.warn('masterData.json not found at expected public paths:', candidatePaths);
        masterData = {};
        return;
      }

      // Do a case-insensitive lookup for the user's city key
      const locateKey = (obj, key) => {
        if (!obj || typeof obj !== 'object') return undefined;
        const trimmed = (key || '').trim();
        const exact = obj[trimmed];
        if (exact) return trimmed;
        const found = Object.keys(obj).find(k => (k || '').trim().toLowerCase() === (trimmed).toLowerCase());
        return found || undefined;
      };

      const cityKey = locateKey(all, userLocation) || locateKey(all, userLocation.trim()) || Object.keys(all)[0];
      masterData = (cityKey && all[cityKey]) ? all[cityKey] : {};

      // Backwards-compat: if per-city uses 'Facility' but UI expects 'Facility Service'
      if (!masterData['Facility Service'] && masterData['Facility']) {
        masterData['Facility Service'] = masterData['Facility'];
      }

      console.log('masterData loaded for', userLocation, 'found cityKey=', cityKey, masterData);
    } catch (err) {
      console.warn('masterData failed to load or parse', err);
      masterData = {};
    }
  }

  // ----------------------------
  // Robust loader for keywords.json
  // ----------------------------
  async function loadKeywords() {
    try {
      const token = localStorage.getItem('token');
      const headers = token ? { 'Authorization': 'Bearer ' + token } : {};
      const candidatePaths = [
        '/data/keywords.json',
        '/keywords.json',
        '/public/data/keywords.json',
        '/public/keywords.json'
      ];

      let loaded = null;
      for (const p of candidatePaths) {
        try {
          const res = await fetch(p, { credentials: 'same-origin', headers });
          if (!res.ok) continue;
          const json = await res.json();
          if (json && typeof json === 'object') {
            loaded = json;
            break;
          }
        } catch (err) {
          continue;
        }
      }

      if (!loaded) {
        console.warn('keywords.json not found at expected public paths:', candidatePaths);
        keywords = {};
        return;
      }

      keywords = loaded;
      console.log('keywords loaded', keywords);
    } catch (err) {
      console.warn('keywords failed to load or parse', err);
      keywords = {};
    }
  }

  function escapeHtml(s) {
    if (s === null || s === undefined) return '';
    return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  function showFormAlert(message, type = 'danger') {
    const container = document.getElementById('formAlertContainer');
    if (!container) return;
    container.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
      ${escapeHtml(message)}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>`;
  }

  function getKeywordsForCategory(categoryLabel) {
    if (!keywords || typeof keywords !== 'object') return [];
    if (keywords[categoryLabel]) return keywords[categoryLabel];
    const found = Object.keys(keywords).find(k => k.toLowerCase() === categoryLabel.toLowerCase());
    if (found) return keywords[found];
    if (Array.isArray(keywords)) return keywords;
    return [];
  }

  function buildCommonSelects({ buildingOptions = [], areaOptions = [], subAreaOptions = [], keywordOptions = [] }) {
    return `
      <div class="mb-3">
        <label class="form-label">Level 1 (Building / Group)</label>
        <select class="form-select" name="building_no" id="buildingSelect" required>
          <option value="">Select</option>
          ${buildingOptions.map(b => `<option value="${escapeHtml(b)}">${escapeHtml(b)}</option>`).join('')}
        </select>
      </div>

      <div class="mb-3">
        <label class="form-label">Level 2 (Area)</label>
        <select class="form-select" name="area_code" id="areaSelect" disabled required>
          <option value="">Select</option>
          ${areaOptions.map(a => `<option value="${escapeHtml(a)}">${escapeHtml(a)}</option>`).join('')}
        </select>
      </div>

      <div class="mb-3">
        <label class="form-label">Level 3 (Sub Area)</label>
        <select class="form-select" name="sub_area" id="subAreaSelect" disabled required>
          <option value="">Select</option>
          ${subAreaOptions.map(s => `<option value="${escapeHtml(s)}">${escapeHtml(s)}</option>`).join('')}
        </select>
      </div>

      <div class="mb-3">
        <label class="form-label">Keyword</label>
        <select class="form-select" name="keyword" id="keywordSelect" required>
          <option value="">Select</option>
          ${keywordOptions.map(k => `<option value="${escapeHtml(k)}">${escapeHtml(k)}</option>`).join('')}
        </select>
      </div>
    `;
  }

  function buildKeywordOnly(keywordsList = []) {
    if (!keywordsList.length) return '';
    return `
      <div class="mb-3">
        <label class="form-label">Keyword (optional)</label>
        <select class="form-select" name="keyword" id="keywordSelect">
          <option value="">Select</option>
          ${keywordsList.map(k => `<option value="${escapeHtml(k)}">${escapeHtml(k)}</option>`).join('')}
        </select>
      </div>
    `;
  }

  function resolveCategoryKey(categoryLabel) {
    if (!masterData || typeof masterData !== 'object') return categoryLabel;
    if (masterData.hasOwnProperty(categoryLabel)) return categoryLabel;
    const trimmed = categoryLabel.trim();
    if (masterData.hasOwnProperty(trimmed)) return trimmed;
    const aliases = { 'Facility Service': 'Facility', 'Facility': 'Facility Service' };
    if (aliases[categoryLabel] && masterData.hasOwnProperty(aliases[categoryLabel])) return aliases[categoryLabel];
    const found = Object.keys(masterData).find(k => k.toLowerCase() === categoryLabel.toLowerCase());
    if (found) return found;
    return categoryLabel;
  }

  function selectCategory(categoryLabel) {
    // Normalize label -> internal category value
    let categoryValue = categoryLabel;
    // map common display to internal category names used in masterData
    if (categoryLabel === 'Facility') categoryValue = 'Facility Service';
    // if categoryLabel already 'Facility Service' keep it
    // other labels (like 'Safety') keep as-is

    // Hide categories, show form
    document.getElementById('categorySection').style.display = "none";
    document.getElementById('formSection').style.display = "block";
    document.getElementById('currentCategoryLabel').innerText = "Selected Category: " + categoryValue;

    // Set category hidden input to normalized internal value
    document.getElementById('selectedCategory').value = categoryValue;

    // Build dynamic fields
    const dyn = document.getElementById('dynamicFields');
    dyn.innerHTML = '';

    const dataKey = resolveCategoryKey(categoryValue);
    const catData = masterData[dataKey] || {};
    const level1Keys = (catData && typeof catData === 'object') ? Object.keys(catData) : [];
    const keywordOptions = getKeywordsForCategory(categoryValue);

    // Facility Service and Safety share the same hierarchical selects + keyword
    if (categoryValue === 'Facility Service' || categoryValue === 'Safety') {
      dyn.innerHTML = buildCommonSelects({
        buildingOptions: level1Keys,
        areaOptions: [],
        subAreaOptions: [],
        keywordOptions: keywordOptions
      });

      const buildingSelect = document.getElementById('buildingSelect');
      const areaSelect = document.getElementById('areaSelect');
      const subAreaSelect = document.getElementById('subAreaSelect');

      if (!buildingSelect) return;

      areaSelect.disabled = true;
      subAreaSelect.disabled = true;

      buildingSelect.onchange = function () {
        const lvl1 = this.value;
        const lvl2 = catData && catData[lvl1];

        areaSelect.innerHTML = `<option value="">Select</option>`;
        subAreaSelect.innerHTML = `<option value="">Select</option>`;
        areaSelect.disabled = true;
        subAreaSelect.disabled = true;

        if (Array.isArray(lvl2)) {
          // If the building's value is an array, treat those as areas (single-level)
          areaSelect.innerHTML += lvl2.map(i => `<option value="${escapeHtml(i)}">${escapeHtml(i)}</option>`).join('');
          areaSelect.disabled = false;
        } else if (lvl2 && typeof lvl2 === 'object') {
          const areaKeys = Object.keys(lvl2 || {});
          areaSelect.innerHTML += areaKeys.map(a => `<option value="${escapeHtml(a)}">${escapeHtml(a)}</option>`).join('');
          areaSelect.disabled = false;
        }
      };

      areaSelect.onchange = function () {
        const lvl1 = buildingSelect.value;
        const lvl2Val = this.value;
        const lvl2Obj = catData && catData[lvl1];

        subAreaSelect.innerHTML = `<option value="">Select</option>`;
        subAreaSelect.disabled = true;

        if (Array.isArray(lvl2Obj)) {
          if (lvl2Val) {
            subAreaSelect.innerHTML = `<option value="${escapeHtml(lvl2Val)}">${escapeHtml(lvl2Val)}</option>`;
            subAreaSelect.disabled = false;
          }
        } else if (lvl2Obj && typeof lvl2Obj === 'object') {
          const subList = lvl2Obj[lvl2Val] || [];
          if (Array.isArray(subList) && subList.length) {
            subAreaSelect.innerHTML += subList.map(s => `<option value="${escapeHtml(s)}">${escapeHtml(s)}</option>`).join('');
            subAreaSelect.disabled = false;
          }
        }
      };
    } else {
      // (Disabled categories won't hit this, but kept for completeness)
      dyn.innerHTML = buildKeywordOnly(keywordOptions);
    }
  }

  function goBackToCategories() {
    // Reset form and go back
    document.getElementById('ticketForm')?.reset();
    document.getElementById('selectedCategory').value = '';
    document.getElementById('dynamicFields').innerHTML = '';
    document.getElementById('currentCategoryLabel').innerText = '';
    document.getElementById('formAlertContainer').innerHTML = '';
    document.getElementById('formSection').style.display = "none";
    document.getElementById('categorySection').style.display = "block";
  }

  function showTicketDetails(ticket) {
    const panel = document.getElementById('ticketDetailPanel');
    const content = document.getElementById('ticketDetailsContent');
    content.innerHTML = `
      <p><strong>ID:</strong> ${escapeHtml(ticket.id)}</p>
      <p><strong>Raised By:</strong> ${escapeHtml(ticket.raised_by)}</p>
      <p><strong>Category:</strong> ${escapeHtml(ticket.category)}</p>
      <p><strong>Keyword:</strong> ${escapeHtml(ticket.keyword)}</p>
      <p><strong>Building:</strong> ${escapeHtml(ticket.building_no)}</p>
      <p><strong>Area:</strong> ${escapeHtml(ticket.area_code)}</p>
      <p><strong>Sub Area:</strong> ${escapeHtml(ticket.sub_area)}</p>
      <p><strong>Description:</strong> ${escapeHtml(ticket.description)}</p>
      <p><strong>Status:</strong> ${escapeHtml(ticket.status)}</p>
      <p><strong>Assigned To:</strong> ${escapeHtml(ticket.assigned_to_name)}</p>
      <p><strong>Completion Note:</strong> ${escapeHtml(ticket.completion_note)}</p>
      <p><strong>Completed At:</strong> ${ticket.completed_at ? new Date(ticket.completed_at).toLocaleString() : '-'}</p>
      <p><strong>Created At:</strong> ${ticket.created_at ? new Date(ticket.created_at).toLocaleString() : '-'}</p>
    `;
    panel.classList.add('show');
  }

  function closePopup() {
    document.getElementById('ticketDetailPanel').classList.remove('show');
  }

  function showTicketDetailsById(id) {
    if (!window._tickets || !Array.isArray(window._tickets)) {
      console.warn('Tickets data not available');
      return;
    }
    const t = window._tickets.find(tt => String(tt.id) === String(id));
    if (!t) {
      console.warn('Ticket not found for id', id);
      return;
    }
    showTicketDetails(t);
  }

  document.addEventListener('DOMContentLoaded', () => {
    Promise.all([loadMasterData(), loadKeywords()]).then(() => {
      // Attach category button click handlers only for enabled buttons
      document.getElementById('btnFacility').addEventListener('click', function() {
        selectCategory('Facility');
      });
      
      document.getElementById('btnSafety').addEventListener('click', function() {
        selectCategory('Safety');
      });
    });

    // NEW: handle form submit via fetch, send cookie credentials and optional Authorization header
    document.getElementById('ticketForm')?.addEventListener('submit', async (e) => {
      e.preventDefault();
      document.getElementById('formAlertContainer').innerHTML = '';

      const selectedCategory = document.getElementById('selectedCategory')?.value || '';
      if (!selectedCategory) {
        showFormAlert('Please choose a Category.', 'danger');
        return;
      }

      // Require full hierarchy + keyword for Facility Service and Safety
      if (selectedCategory === 'Facility Service' || selectedCategory === 'Safety') {
        const b = document.getElementById('buildingSelect')?.value;
        const a = document.getElementById('areaSelect')?.value;
        const s = document.getElementById('subAreaSelect')?.value;
        const k = document.getElementById('keywordSelect')?.value;

        if (b === '' || a === '' || s === '' || k === '') {
          showFormAlert('Please select all levels: Building, Area, Sub Area, and Keyword.', 'danger');
          return;
        }
      }

      // collect form data into plain object
      const formEl = e.target;
      const formData = new FormData(formEl);
      const data = {};
      for (const [key, value] of formData.entries()) {
        data[key] = value;
      }

      try {
        // attempt to include Authorization header if token stored in localStorage (optional)
        const token = localStorage.getItem('token'); // optional: if you saved token at login
        const headers = { 'Content-Type': 'application/json' };
        if (token) headers['Authorization'] = 'Bearer ' + token;

        const resp = await fetch('/ticket/submit', {
          method: 'POST',
          headers,
          credentials: 'include', // ensures cookie (httpOnly token) is sent
          body: JSON.stringify(data),
        });

        if (resp.ok) {
          // server redirects normally when called from browser form; using fetch we redirect client manually
          window.location.href = '/dashboard/user';
        } else if (resp.status === 401) {
          showFormAlert('Unauthorized. Please log in again.', 'danger');
        } else {
          const text = await resp.text();
          // try to show server message or fallback
          showFormAlert(text || 'Failed to submit ticket. Try again later.', 'danger');
          console.error('Ticket submit failed', resp.status, text);
        }
      } catch (err) {
        console.error('Submit error', err);
        showFormAlert('Network or server error. Try again later.', 'danger');
      }
    });

    // attach details buttons
    document.querySelectorAll('.show-ticket-details').forEach(btn => {
      btn.addEventListener('click', (evt) => {
        const id = evt.currentTarget.getAttribute('data-ticket-id');
        if (id) {
          showTicketDetailsById(id);
        }
      });
    });
  });
</script>

<script>
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/service-worker.js')
    .then(reg => {
      console.log('Service Worker registered', reg);
      subscribeUser(reg); // Pass the registration to your subscription function
    })
    .catch(err => console.error('Service Worker registration failed:', err));
}

async function subscribeUser(registration) {
  if (!registration || !('PushManager' in window)) return;

  try {
    // Fetch public VAPID key from server
    const token = localStorage.getItem('token');
    const headers = token ? { 'Authorization': 'Bearer ' + token } : {};
    const res = await fetch('/notifications/public-key', { credentials: 'same-origin', headers });
    const data = await res.json();
    const publicKey = data.key;

    // 1. Unsubscribe old subscription first (important when keys change)
    const existingSub = await registration.pushManager.getSubscription();
    if (existingSub) {
      console.log("🔄 Unsubscribing old push subscription...");
      await existingSub.unsubscribe();
    }

    // 2. Subscribe with new VAPID public key
    const subscription = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(publicKey)
    });

    // 3. Send subscription to server
    // Include credentials and optional Authorization header if token stored in localStorage
    const token2 = localStorage.getItem('token');
    const headers2 = { 'Content-Type': 'application/json' };
    if (token2) headers2['Authorization'] = 'Bearer ' + token2;

    await fetch('/notifications/subscribe', {
      method: 'POST',
      headers: headers2,
      credentials: 'same-origin',
      body: JSON.stringify(subscription)
    });

    console.log('✅ Push subscription saved for user');
  } catch (err) {
    console.error('❌ Push subscription failed:', err);
  }

  function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
    const rawData = atob(base64);
    return Uint8Array.from([...rawData].map(c => c.charCodeAt(0)));
  }
}
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
